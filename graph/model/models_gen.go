// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Category string

const (
	CategoryAll         Category = "ALL"
	CategoryMusic       Category = "MUSIC"
	CategoryFunny       Category = "FUNNY"
	CategoryVideos      Category = "VIDEOS"
	CategoryProgramming Category = "PROGRAMMING"
	CategoryNews        Category = "NEWS"
	CategoryFashion     Category = "FASHION"
)

var AllCategory = []Category{
	CategoryAll,
	CategoryMusic,
	CategoryFunny,
	CategoryVideos,
	CategoryProgramming,
	CategoryNews,
	CategoryFashion,
}

func (e Category) IsValid() bool {
	switch e {
	case CategoryAll, CategoryMusic, CategoryFunny, CategoryVideos, CategoryProgramming, CategoryNews, CategoryFashion:
		return true
	}
	return false
}

func (e Category) String() string {
	return string(e)
}

func (e *Category) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Category(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Category", str)
	}
	return nil
}

func (e Category) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PostType string

const (
	PostTypeLink PostType = "LINK"
	PostTypeText PostType = "TEXT"
)

var AllPostType = []PostType{
	PostTypeLink,
	PostTypeText,
}

func (e PostType) IsValid() bool {
	switch e {
	case PostTypeLink, PostTypeText:
		return true
	}
	return false
}

func (e PostType) String() string {
	return string(e)
}

func (e *PostType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PostType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PostType", str)
	}
	return nil
}

func (e PostType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
